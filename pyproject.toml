[tool.poetry]
name = "frag"
version = "0.1.0"
description = "Factual Retrieval Augmented Generation (FRAG) Benchmark"
authors = ["Han Lee <lee.hanchung@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
python-dotenv = "^1.0.0"
openai = "^1.3.3"
pydantic = "^2.3.0"
datasets = "^2.14.5"
tiktoken = "^0.5.1"
langchain = "^0.0.338"
anthropic = "^0.7.2"
pypdf = "^3.17.1"
tokenizers = "^0.15.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
pytest = "^7.4.0"
ipykernel = "^6.26.0"
pytest-asyncio = "^0.21.1"

[tool.ruff]
src = ["frag"]
fix = true
show-fixes = true
show-source = true

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

select = [
    "B",  # flake8-bugbear
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "W",  # pycodestyle warnings
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
ignore-init-module-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
force-single-line = false
order-by-type = false
known-third-party = ["pydantic", "starlette"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
